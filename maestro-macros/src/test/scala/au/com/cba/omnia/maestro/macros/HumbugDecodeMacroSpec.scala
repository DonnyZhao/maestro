//   Copyright 2014 Commonwealth Bank of Australia
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

package au.com.cba.omnia.maestro.macros

import au.com.cba.omnia.maestro.core.codec._
import au.com.cba.omnia.maestro.core.data._
import au.com.cba.omnia.maestro.macros._

import au.com.cba.omnia.maestro.test.Spec
import au.com.cba.omnia.maestro.test.Arbitraries._
import au.com.cba.omnia.maestro.test.thrift.humbug._

object HumbugDecodeMacroSpec extends Spec { def is = s2"""

HumbugDecodeMacro
=================

  decode from UnknownDecodeSource                           $unknown                          
  decode from ValDecodeSource                               $valdecode                        
  type mismatch ValDecodeSource                             $typeErrorVal                     
  type mismatch UnknownDecodeSource                         $typeErrorUnknown                 
  not enough fields ValDecodeSource                         $sizeErrorVal                     
  not enough fields UnknownDecodeSource                     $sizeErrorUnknown                 
  decode very large thrift structs from UnknownDecodeSource $unknownLarge 
  decode very large thrift structs from ValDecodeSource     $valdecodeLarge     

"""

  implicit val encodeTypes = Macros.mkEncode[Types]
  implicit val decodeTypes = Macros.mkDecode[Types]
  implicit val encodeLarge = Macros.mkEncode[Large]
  implicit val decodeLarge = Macros.mkDecode[Large]

  def valdecode = prop { (types: Types) =>
    decodeTypes.decode(ValDecodeSource(Encode.encode(types))) must_== DecodeOk(types)
  }

  def unknown = prop { (types: Types) =>
    val unknown = UnknownDecodeSource(List(
      types.stringField,
      types.booleanField.toString,
      types.intField.toString,
      types.longField.toString,
      types.doubleField.toString
    ))

    decodeTypes.decode(unknown) must_== DecodeOk(types)
  }

  def typeErrorVal = {
    val encoded = ValDecodeSource(List(
      StringVal("1"), StringVal("2"), StringVal("3"), StringVal("4"), StringVal("5"),
      StringVal("6"), StringVal("7")
    ))
    decodeTypes.decode(encoded) must_== DecodeError(
      ValDecodeSource(List(StringVal("2"), StringVal("3"), StringVal("4"), StringVal("5"), StringVal("6"), StringVal("7"))),
      1,
      ValTypeMismatch(StringVal("2"), "Boolean")
    )
  }

  def sizeErrorVal = {
    decodeTypes.decode(ValDecodeSource(List())) must_== DecodeError(
      ValDecodeSource(List()),
      0,
      NotEnoughInput(5, "au.com.cba.omnia.maestro.test.thrift.humbug.Types")
    )
  }

  def typeErrorUnknown = {
    val encoded = UnknownDecodeSource(List(
      "1", "2", "3", "4", "5", "6", "7"
    ))
    decodeTypes.decode(encoded) must parseErrorMatcher[Types](DecodeError(
      UnknownDecodeSource(List("2", "3", "4", "5", "6", "7")),
      1,
      ParseError("2", "Boolean", null)
    ))
  }

  def sizeErrorUnknown = {
    decodeTypes.decode(UnknownDecodeSource(List())) must_== DecodeError(
      UnknownDecodeSource(List()),
      0,
      NotEnoughInput(5, "au.com.cba.omnia.maestro.test.thrift.humbug.Types")
    )
  }

  def parseErrorMatcher[T] = (be_==(_: DecodeResult[T])) ^^^ ((_: DecodeResult[T]) match {
    case e@DecodeError(_, _, r@ParseError(_, _, _)) =>
      e.copy(reason = r.copy(error = null))
    case other => other
  })

  def valdecodeLarge = {
    val large = createLarge
    val x = Encode.encode(large)
    decodeLarge.decode(ValDecodeSource(Encode.encode(large))) must_== DecodeOk(large)
  }

  def unknownLarge = {
    val large = createLarge
    val unknown = createUnknown(large)

    decodeLarge.decode(unknown) must_== DecodeOk(large)
  }

  def createUnknown(x: Large) = UnknownDecodeSource(List(
    x._1.toString,
    x._2.toString,
    x._3.toString,
    x._4.toString,
    x._5.toString,
    x._6,
    x._7,
    x._8,
    x._9,
    x._10,
    x._11,
    x._12,
    x._13,
    x._14,
    x._15,
    x._16,
    x._17,
    x._18,
    x._19,
    x._20,
    x._21,
    x._22,
    x._23,
    x._24,
    x._25,
    x._26,
    x._27,
    x._28,
    x._29,
    x._30,
    x._31,
    x._32,
    x._33,
    x._34,
    x._35,
    x._36,
    x._37,
    x._38,
    x._39,
    x._40,
    x._41,
    x._42,
    x._43,
    x._44,
    x._45,
    x._46,
    x._47,
    x._48,
    x._49,
    x._50,
    x._51,
    x._52,
    x._53,
    x._54,
    x._55,
    x._56,
    x._57,
    x._58,
    x._59,
    x._60,
    x._61,
    x._62,
    x._63,
    x._64,
    x._65,
    x._66,
    x._67,
    x._68,
    x._69,
    x._70,
    x._71,
    x._72,
    x._73,
    x._74,
    x._75,
    x._76,
    x._77,
    x._78,
    x._79,
    x._80,
    x._81,
    x._82,
    x._83,
    x._84,
    x._85,
    x._86,
    x._87,
    x._88,
    x._89,
    x._90,
    x._91,
    x._92,
    x._93,
    x._94,
    x._95,
    x._96,
    x._97,
    x._98,
    x._99,
    x._100,
    x._101,
    x._102,
    x._103,
    x._104,
    x._105,
    x._106,
    x._107,
    x._108,
    x._109,
    x._110,
    x._111,
    x._112,
    x._113,
    x._114,
    x._115,
    x._116,
    x._117,
    x._118,
    x._119,
    x._120,
    x._121,
    x._122,
    x._123,
    x._124,
    x._125,
    x._126,
    x._127,
    x._128,
    x._129,
    x._130,
    x._131,
    x._132,
    x._133,
    x._134,
    x._135,
    x._136,
    x._137,
    x._138,
    x._139,
    x._140,
    x._141,
    x._142,
    x._143,
    x._144,
    x._145,
    x._146,
    x._147,
    x._148,
    x._149,
    x._150,
    x._151,
    x._152,
    x._153,
    x._154,
    x._155,
    x._156,
    x._157,
    x._158,
    x._159,
    x._160,
    x._161,
    x._162,
    x._163,
    x._164,
    x._165,
    x._166,
    x._167,
    x._168,
    x._169,
    x._170,
    x._171,
    x._172,
    x._173,
    x._174,
    x._175,
    x._176,
    x._177,
    x._178,
    x._179,
    x._180,
    x._181,
    x._182,
    x._183,
    x._184,
    x._185,
    x._186,
    x._187,
    x._188,
    x._189,
    x._190,
    x._191,
    x._192,
    x._193,
    x._194,
    x._195,
    x._196,
    x._197,
    x._198,
    x._199,
    x._200,
    x._201,
    x._202,
    x._203,
    x._204,
    x._205,
    x._206,
    x._207,
    x._208,
    x._209,
    x._210,
    x._211,
    x._212,
    x._213,
    x._214,
    x._215,
    x._216,
    x._217,
    x._218,
    x._219,
    x._220,
    x._221,
    x._222,
    x._223,
    x._224,
    x._225,
    x._226,
    x._227,
    x._228,
    x._229,
    x._230,
    x._231,
    x._232,
    x._233,
    x._234,
    x._235,
    x._236,
    x._237,
    x._238,
    x._239,
    x._240,
    x._241,
    x._242,
    x._243,
    x._244,
    x._245,
    x._246,
    x._247,
    x._248,
    x._249,
    x._250,
    x._251,
    x._252,
    x._253,
    x._254,
    x._255,
    x._256,
    x._257,
    x._258,
    x._259,
    x._260,
    x._261,
    x._262,
    x._263,
    x._264,
    x._265,
    x._266,
    x._267,
    x._268,
    x._269,
    x._270,
    x._271,
    x._272,
    x._273,
    x._274,
    x._275,
    x._276,
    x._277,
    x._278,
    x._279,
    x._280,
    x._281,
    x._282,
    x._283,
    x._284,
    x._285,
    x._286,
    x._287,
    x._288,
    x._289,
    x._290,
    x._291,
    x._292,
    x._293,
    x._294,
    x._295,
    x._296,
    x._297,
    x._298,
    x._299,
    x._300,
    x._301,
    x._302,
    x._303,
    x._304,
    x._305,
    x._306,
    x._307,
    x._308,
    x._309,
    x._310,
    x._311,
    x._312,
    x._313,
    x._314,
    x._315,
    x._316,
    x._317,
    x._318,
    x._319,
    x._320,
    x._321,
    x._322,
    x._323,
    x._324,
    x._325,
    x._326,
    x._327,
    x._328,
    x._329,
    x._330,
    x._331,
    x._332,
    x._333,
    x._334,
    x._335,
    x._336,
    x._337,
    x._338,
    x._339,
    x._340,
    x._341,
    x._342,
    x._343,
    x._344,
    x._345,
    x._346,
    x._347,
    x._348,
    x._349,
    x._350,
    x._351,
    x._352,
    x._353,
    x._354,
    x._355,
    x._356,
    x._357,
    x._358,
    x._359,
    x._360,
    x._361,
    x._362,
    x._363,
    x._364,
    x._365,
    x._366,
    x._367,
    x._368,
    x._369,
    x._370,
    x._371,
    x._372,
    x._373,
    x._374,
    x._375,
    x._376,
    x._377,
    x._378,
    x._379,
    x._380,
    x._381,
    x._382,
    x._383,
    x._384,
    x._385,
    x._386,
    x._387,
    x._388,
    x._389,
    x._390,
    x._391,
    x._392,
    x._393,
    x._394,
    x._395,
    x._396,
    x._397,
    x._398,
    x._399,
    x._400,
    x._401,
    x._402,
    x._403,
    x._404,
    x._405,
    x._406,
    x._407,
    x._408,
    x._409,
    x._410,
    x._411,
    x._412,
    x._413,
    x._414,
    x._415,
    x._416,
    x._417,
    x._418,
    x._419,
    x._420,
    x._421,
    x._422,
    x._423,
    x._424,
    x._425,
    x._426,
    x._427,
    x._428,
    x._429,
    x._430,
    x._431,
    x._432,
    x._433,
    x._434,
    x._435,
    x._436,
    x._437,
    x._438,
    x._439,
    x._440,
    x._441,
    x._442,
    x._443,
    x._444,
    x._445,
    x._446,
    x._447,
    x._448,
    x._449,
    x._450,
    x._451,
    x._452,
    x._453,
    x._454,
    x._455,
    x._456,
    x._457,
    x._458,
    x._459,
    x._460,
    x._461,
    x._462,
    x._463,
    x._464,
    x._465,
    x._466,
    x._467,
    x._468,
    x._469,
    x._470,
    x._471,
    x._472,
    x._473,
    x._474,
    x._475,
    x._476,
    x._477,
    x._478,
    x._479,
    x._480,
    x._481,
    x._482,
    x._483,
    x._484,
    x._485,
    x._486,
    x._487,
    x._488,
    x._489,
    x._490,
    x._491,
    x._492,
    x._493,
    x._494,
    x._495,
    x._496,
    x._497,
    x._498,
    x._499,
    x._500,
    x._501,
    x._502,
    x._503,
    x._504,
    x._505,
    x._506,
    x._507,
    x._508,
    x._509,
    x._510,
    x._511,
    x._512,
    x._513,
    x._514,
    x._515,
    x._516,
    x._517,
    x._518,
    x._519,
    x._520,
    x._521,
    x._522,
    x._523,
    x._524,
    x._525,
    x._526,
    x._527,
    x._528,
    x._529,
    x._530,
    x._531,
    x._532,
    x._533,
    x._534,
    x._535,
    x._536,
    x._537,
    x._538,
    x._539,
    x._540,
    x._541,
    x._542,
    x._543,
    x._544,
    x._545,
    x._546,
    x._547,
    x._548,
    x._549,
    x._550,
    x._551,
    x._552,
    x._553,
    x._554,
    x._555,
    x._556,
    x._557,
    x._558,
    x._559,
    x._560,
    x._561,
    x._562,
    x._563,
    x._564,
    x._565,
    x._566,
    x._567,
    x._568,
    x._569,
    x._570,
    x._571,
    x._572,
    x._573,
    x._574,
    x._575,
    x._576,
    x._577,
    x._578,
    x._579,
    x._580,
    x._581,
    x._582,
    x._583,
    x._584,
    x._585,
    x._586,
    x._587,
    x._588,
    x._589,
    x._590,
    x._591,
    x._592,
    x._593,
    x._594,
    x._595,
    x._596,
    x._597,
    x._598,
    x._599,
    x._600,
    x._601,
    x._602,
    x._603,
    x._604,
    x._605,
    x._606,
    x._607,
    x._608,
    x._609,
    x._610,
    x._611,
    x._612,
    x._613,
    x._614,
    x._615,
    x._616,
    x._617,
    x._618,
    x._619,
    x._620,
    x._621,
    x._622,
    x._623,
    x._624,
    x._625,
    x._626,
    x._627,
    x._628,
    x._629,
    x._630,
    x._631,
    x._632,
    x._633,
    x._634,
    x._635,
    x._636,
    x._637,
    x._638,
    x._639,
    x._640,
    x._641,
    x._642,
    x._643,
    x._644,
    x._645,
    x._646,
    x._647,
    x._648,
    x._649,
    x._650,
    x._651,
    x._652,
    x._653,
    x._654,
    x._655,
    x._656,
    x._657,
    x._658,
    x._659,
    x._660,
    x._661,
    x._662,
    x._663,
    x._664,
    x._665,
    x._666,
    x._667,
    x._668,
    x._669,
    x._670,
    x._671,
    x._672,
    x._673,
    x._674,
    x._675,
    x._676,
    x._677,
    x._678,
    x._679,
    x._680,
    x._681,
    x._682,
    x._683,
    x._684,
    x._685,
    x._686,
    x._687,
    x._688,
    x._689,
    x._690,
    x._691,
    x._692,
    x._693,
    x._694,
    x._695,
    x._696,
    x._697,
    x._698,
    x._699,
    x._700,
    x._701,
    x._702,
    x._703,
    x._704,
    x._705,
    x._706,
    x._707,
    x._708,
    x._709,
    x._710,
    x._711,
    x._712,
    x._713,
    x._714,
    x._715,
    x._716,
    x._717,
    x._718,
    x._719,
    x._720,
    x._721,
    x._722,
    x._723,
    x._724,
    x._725,
    x._726,
    x._727,
    x._728,
    x._729,
    x._730,
    x._731,
    x._732,
    x._733,
    x._734,
    x._735,
    x._736,
    x._737,
    x._738,
    x._739,
    x._740,
    x._741,
    x._742,
    x._743,
    x._744,
    x._745,
    x._746,
    x._747,
    x._748,
    x._749,
    x._750,
    x._751,
    x._752,
    x._753,
    x._754,
    x._755,
    x._756,
    x._757,
    x._758,
    x._759,
    x._760,
    x._761,
    x._762,
    x._763,
    x._764,
    x._765,
    x._766,
    x._767,
    x._768,
    x._769,
    x._770,
    x._771,
    x._772,
    x._773,
    x._774,
    x._775,
    x._776,
    x._777,
    x._778,
    x._779,
    x._780,
    x._781,
    x._782,
    x._783,
    x._784,
    x._785,
    x._786,
    x._787,
    x._788,
    x._789,
    x._790,
    x._791,
    x._792,
    x._793,
    x._794,
    x._795,
    x._796,
    x._797,
    x._798,
    x._799,
    x._800,
    x._801,
    x._802,
    x._803,
    x._804,
    x._805,
    x._806,
    x._807,
    x._808,
    x._809,
    x._810,
    x._811,
    x._812,
    x._813,
    x._814,
    x._815,
    x._816,
    x._817,
    x._818,
    x._819,
    x._820,
    x._821,
    x._822,
    x._823,
    x._824,
    x._825,
    x._826,
    x._827,
    x._828,
    x._829,
    x._830,
    x._831,
    x._832,
    x._833,
    x._834,
    x._835,
    x._836,
    x._837,
    x._838,
    x._839,
    x._840,
    x._841,
    x._842,
    x._843,
    x._844,
    x._845,
    x._846,
    x._847,
    x._848,
    x._849,
    x._850,
    x._851,
    x._852,
    x._853,
    x._854,
    x._855,
    x._856,
    x._857,
    x._858,
    x._859,
    x._860,
    x._861,
    x._862,
    x._863,
    x._864,
    x._865,
    x._866,
    x._867,
    x._868,
    x._869,
    x._870,
    x._871,
    x._872,
    x._873,
    x._874,
    x._875,
    x._876,
    x._877,
    x._878,
    x._879,
    x._880,
    x._881,
    x._882,
    x._883,
    x._884,
    x._885,
    x._886,
    x._887,
    x._888,
    x._889,
    x._890,
    x._891,
    x._892,
    x._893,
    x._894,
    x._895,
    x._896,
    x._897,
    x._898,
    x._899,
    x._900,
    x._901,
    x._902,
    x._903,
    x._904,
    x._905,
    x._906,
    x._907,
    x._908,
    x._909,
    x._910,
    x._911,
    x._912,
    x._913,
    x._914,
    x._915,
    x._916,
    x._917,
    x._918,
    x._919,
    x._920,
    x._921,
    x._922,
    x._923,
    x._924,
    x._925,
    x._926,
    x._927,
    x._928,
    x._929,
    x._930,
    x._931,
    x._932,
    x._933,
    x._934,
    x._935,
    x._936,
    x._937,
    x._938,
    x._939,
    x._940,
    x._941,
    x._942,
    x._943,
    x._944,
    x._945,
    x._946,
    x._947,
    x._948,
    x._949,
    x._950,
    x._951,
    x._952,
    x._953,
    x._954,
    x._955,
    x._956,
    x._957,
    x._958,
    x._959,
    x._960,
    x._961,
    x._962,
    x._963,
    x._964,
    x._965,
    x._966,
    x._967,
    x._968,
    x._969,
    x._970,
    x._971,
    x._972,
    x._973,
    x._974,
    x._975,
    x._976,
    x._977,
    x._978,
    x._979,
    x._980,
    x._981,
    x._982,
    x._983,
    x._984,
    x._985,
    x._986,
    x._987,
    x._988,
    x._989,
    x._990,
    x._991,
    x._992,
    x._993,
    x._994,
    x._995,
    x._996,
    x._997,
    x._998,
    x._999,
    x._1000
  ))
}
